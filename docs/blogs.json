[
    {
        "title": "Frontend Framework Faceoff",
        "description": "Angular vs. React vs. Vue.js",
        "headerImage": "./assets/images/frameworkFaceoff.png",
        "publishDate": "April 9, 2023",
        "content": "TLDR;\nAll these frameworks are solid and an argument could be made to use any of them. From my experience, I liked using each because of a different reason. Angular has a standard structure so you don’t have to make so many decisions yourself and a cli that generates some code for you.  React has JSX/TSX which is nice to “inject html” into your JavaScript/TypeScript. Vue.js has the different parts of the component (HTML, CSS, and JavaScript) in the same file, neatly organized. Plus, Vue.js was not created by a major tech company, for those wary of the major tech companies. However, all are now open source.\nThis article was based on a presentation I gave on the framework faceoff for the Sioux Falls Developers Group. I want to thank Blend Interactive for allowing the group to utilize their office for the presentation and for the food. I also want to thank those that attended for taking the time to get together and talk tech for a few hours. For anyone interested in the Sioux Falls Devs group, check out our website: https://www.sfdevs.com.\nFaceoff \nThere have been countless debates and articles written about the “best” frontend framework (I know that react is technically a library and not a framework, but for ease of reading and writing, I will be referring to it as a framework in this article). The Internet does not need another one. Having said that, I would like to present some of my thoughts on the subject as someone new (at least professionally) to the conversation. Instead of just doing some research on the frameworks, and based on a recommendation of a mentor of mine to try out different frontend frameworks, I decided to build the same application in each framework. Plus, if you are a user of ChatGPT, it will give you a great explanation if you just ask it what the difference between the three frameworks are. Before we delve into my experience, a bit of a disclaimer: I spend most of my working days in Angular, so that is the framework I am most familiar with. Much of my development experience is self-taught (feel free to check out my previous articles on that subject).\nProject Overview \nWhen thinking through what I wanted to build 3 times in a row, there were a couple of items I wanted to make sure were included: HTTP Request, UI styling, state management, and lifecycle hooks. I wanted to build something complex enough that the example applications would have enough meat on them for a demo, but not so complex that it would take months to build with 3 different frameworks. I ended up doing some research on public APIs that I could pull some data from and came across Spoonacular (https://spoonacular.com/food-api), which provided an endpoint that provided food recipes based on many different queries. The data that I cared about for this app was the number of calories, protein, fat, and carbs per recipe. This was a great API to use! It provides a lot of information and larger applications could easily be built using the API, however, you do need to create an account and the free access does cap the number of requests you can make each day. With my API in place, I wanted to build out 2 major features for my app.\nThe ability to generate a number of dishes based on the following criteria:\n- Max calories\n- Min calories\n- Max protein\n- Min protein\n- Max fat\n- Min fat\n- Max carbs\n- Min carbs\n- Number of records to return\nBe able to add a dish to my day and then total the number of calories, protein, carbs, and fat for the day.\nWith these two features in mind, I got started coding up some applications.\nDevelopment\nFor the actual development of the applications my approach was fairly strait forward. I would start with Angular, then React, then Vue.js, the reason being that I had the most experience with Angular, absolutely no experience with Vue.js, and a little React. I did not want to build the entire thing with each framework, instead opting to build a little bit with Angular, then move to React and build that same little bit with React, then finally with Vue.js. The thought process was that I would retain that work fresh in my mind and taking smaller pieces and iterating over each framework. This ended up working out really well and I would suggest the same if you ever want to take on a similar project. The development cycle was: macros form -> form results into a table -> daily summary table -> add dish to summary -> summary totals -> design cleanup.\nLessons Learned\nSo, what did I learn from this experience?\n1. Building out each app using Angular, React, or Vue.js was fairly simple the first app was built. Once you have a general knowledge of how each work, which you can get from any starting tutorial on their respective web sites, the building of the web app is not difficult. Each framework takes a different approach to this. I heard a phrase that perfectly sums up Angular and React at one point: Angular injects JavaScript/TypeScript into your HTML, while React injects HTML, via JSX/TSX, into your JavaScript/TypeScript. Meanwhile, Vue.js has everything in their own .vue file that breaks HTML, JavaScript/TypeScript, and style into their own section.\n2. State management was easily the most difficult aspect of development for each of these. This was partially intentional because I wanted to experience some different ways of working with state in each framework. Angular, I used what I was familiar with which was RxJS. React, Redux is extremely popular. Vue.js, XState because it is used by a local software company and I wanted to learn what they learned. State management using Redux and XState took some time to fully understand, as there is a lot of very specific parts to each of these. For the apps I built, a full blown state management tool was not necessary, I could have easily passed data up and down the component tree as needed. However, as I mentioned before, I wanted to get a feel for state management in each framework. For the most part this is not something that that was difficult because of the frameworks, but rather the challenges associated with each library. You can usually find the same state library you are accustom to, or something very similar, for state management in each framework.\n3. Something that took just as long as state management, but really should not have, was getting a UI library to work with Vue.js... Angular and React were very simple to import and use prebuilt UI components, but I continued to run into problems with Vue.js... This issue with Vue.js stemmed largely from the recent release of Vue.js 3. I ultimately was able to make something that looked halfway decent using the Quasar framework (https://quasar.dev/). I would highly recommend Quasar because it has a lot of powerful tools that many other UI libraries do not and allowed me to build something relatively easily after I found it.\nWho Wins?\nSo, the real question, who wins this faceoff? If you have spent any time in the professional world, you know that the answer is: “It depends.” I know that is not the answer most people want to hear, but given the difficulties that come with development, personal preferences, and the limited amount of time I spent with each framework, that is the best I can come up with. There were things I liked and disliked for each framework and situations where each would work better than another.\nA lot of articles I read stated that you should not start with Angular because of the amount of 'stuff' that comes with it and the fact that you have to build the 'Angular way'. I disagree with this assessment. Angular is more restrictive than the other frameworks, which could be helpful for newer developers to frontend development. The resources online are also much more likely to work as in your own code because most Angular apps are built in a similar way. While the buzz around Angular is not increasing like the others, even decreasing according to some resources, it is still widely used and a great option for those in a community with a lot of need for Angular development.\nThere is a lot of resources online for React, because it is the most popular framework for frontend development. It was great to be able to use TSX, it made some things a lot easier from what I was use to in Angular. Having said that, the fact that you could either use functional or class components got a little annoying from time to time. There were several situations in which I would be doing research on something, only to realize they used a class component, while I was using a functional component. React is probably the safe choice because of its popularity and available resources.\nVue.js was the tool I had the least amount of knowledge about, but having used it, I liked it. While the number of resources where far less than Angular or React, it was something new to figure out for myself. The fact that it is not started by one of the large tech companies and the “icky” feeling of working with technology that was developed by organizations that collect personal data, is just a plus for Vue.js.  Vue.js is a cool option and a little bit of a maverick compared to the other two major players.\nOvertime Bonus\nSince I had some between finishing up the three major frameworks and when I was presenting to the SF Devs group, I decided to play around with two more frameworks, Next.js and Svelte. As before, I am not going to go into depth about what these frameworks are and what makes them special, you can Google that or ask ChatGPT. From my experience, since Next.js is built on of React, if you know React, you know Next.js. However, Next.js has a lot of additional features when looking at how it actually renders pages for the user. For my project, it did not really matter though. I then built another app in Svelte and I was very impressed. From my experience, Svelte is my favorite of the frameworks. It is newer than the others so the creators of Svelte were able to build it from the ground up with all the lessons from the other frameworks. The community for Svelte is still very small and the tools are young, but I think it is very promising. I am glad I picked up Svelte because it might be something I will be using more of going forward.\nConclusion\nMy suggestion to anyone trying to learn a frontend framework would be to play around with a couple of them to see what you like. Me personally, I am going to continue working with Angular for my job, know a little of React because of its massive market share it has in the space, and build some side projects with Svelte because I like the framework so much. I would suggest every front-end dev knows the basics of React because that is where 80% (complete made-up statistic) of the jobs are. Having said that, spend some time learning something else that piques your interest because the field is rapidly changing and the knowledge might open new doors for you. Learn a new up and coming framework for fun but balance that skill out with an established skill like React or Angular.\nAll my code for this project can be found on my GitHub page https://github.com/tlarnold10/frameworkPresentation."
    },
    {
        "title": "My Time in Sales",
        "description": "While not part of the original plan, my time in sales taught me a lot.",
        "headerImage": "./assets/images/aIMG_2302.jpg",
        "publishDate": "February 15, 2023",
        "content": "For as long as I can remember, my mother was in sales. I never found any interest in the topic and had a general aversion to “salespeople”. Never would have considered it something I would have done professionally. Then how did I end up as an outside sales rep at a software development company shortly after college? I would be lying if I said that at that time it was a strategic decision in order to set myself up for success in my career. Even though the experience was more of a leap of faith than a meticulously planned chess move in my career, I learned a lot during my time in sales at Omnitech. I am positive I would not be where I am now if it wasn’t for the experience. I know sales is not something many people want to read about, but to those people I say: “just give this post a quick read, you might find some little nuggets of info”. Here are some of the most valuable lessons I learned during my time in sales at Omnitech.\nRelationships are important. This goes for sales, management, family, community, and life in general. You want to surround yourself with people you like to be around. You can take this a step further by saying that you want to buy from people you like. Building relationships is how you lead a successful team, and trust is built through those relationships. I am not going to buy something from someone unless I can trust the person selling it. In my opinion, this is the golden rule for salespeople. Building a relationship takes time and when things go bad (which eventually something will go bad), the solid relationships are the ones that last. A solid relationship doesn’t happen overnight, you have to invest time and energy into it. I strongly recommend everyone read the incredibly popular book “How to Win Friends and Influence People” by Dale Carnegie to improve your relationship building prowess. This lesson helped me so much in my career, because I knew I had to build relationships with my boss, my team members, and coworkers. That’s when you can really get shit done, when you have a solid team in which the team members have relationships built on trust amongst each other.\nGoing to add a sub item here to mention that having a solid relationship with your coworkers can greatly improve your work experience as well, so be sure to invest some time into them!\nSales (revenue) is what drives business. This may seem a bit obvious, but unless you have money coming in the door, you don’t have a successful business. Someone will argue that you can have a successful business that makes no money, many tech startups operate this way by taking outside investments or going public. However, I would not take this approach because if you do not have sales, you don’t know if anyone actually values what you are providing. If you think you have the best product in the world, but no one is going to spend their money on it, then your product might not be such hot shit... \nNo matter what a person’s title or what company they work for, at the end of the day, they are still just a person. This is not meant to devalue anyone, but rather help people understand that even the CEO of a massive corporation is still just a human. They have personal issues they are working through just like everyone else. As my sales manager at Omnitech use to tell me, “Everyone puts their pants on the same way: one leg at a time.” This idea gave me the confidence to cold call people and want to provide value to them. With this concept in mind, many of the most successful people are a lot less intimidating. So, invite that person you look up to out for coffee or lunch. The worst thing they can say is “no”, but I have often found that people are more willing to mentor others than we think. You could have a life changing experience because you took a chance to talk with an influential person. Even if they do say “no”, you can ask someone else, which brings us to the next point... \nYou are going to hear “no” a lot in life, and that is okay. I really struggled with this when I started in sales. Not only was I a more introverted person that didn’t always want to talk with others, but after the 100th time someone tells you they don’t want to talk to you, there were times I did not want to do it anymore. I believe it is the person that can hear the word “no” the most in life and keep moving forward that will be the most successful. You didn’t get a job offer at that company you wanted to work for? That’s okay. Learn something from it, implement some changes for next time, and apply for another job!\nAt the end of the day, sales is not for everyone. I am not suggesting that everyone go out and get a sales job ASAP. But the experience certainly opened my eyes to the way professional and business life operates. So go ahead and take chances by meeting with a mentor of yours, learn how your business actually sells and makes money, build a stronger relationship with your boss, and if you are looking to start your own business, make sure you are building something that people will actually buy! \nI want to close with a special shout out to the leaders at Omnitech for taking a chance on me. They took in a fresh graduate with no experience on a whim that he might be able to provide value to the company. I learned a lot from them and I thank them for the opportunity!"
    },
    {
        "title": "My Journey to Software Developer",
        "description": "While not part of the original plan, my time in sales taught me a lot.",
        "headerImage": "./assets/images/Picture6.jpg",
        "publishDate": "December 28, 2022",
        "content": "My path to software development has not necessarily been the most strait of lines. It has been a ride, one which I pray marches forward as well as it has. I wanted to share my career journey to this point and some lessons along the way. Not only is this a narrative for self-reflection, but I hope a lesson that can inspire others in their journeys.\nTo keep this post from turning into a novel, I would like to look at my career thus far on how programming has left a consistent impact on my career progression.\nCollege\nCollege was certainly a time period of significant change. Beyond the obvious changes that come with moving away from parents for the first time, there is a major life decision that needs to be made: “what do I want to do for the rest of my life?” This was a difficult one for me... I knew a little about computers, but nothing beyond a high school class on Excel and Photoshop. But what I did know, I found interesting enough to declare a computer science and business major at Augustana University, Augustana College back in my day! Computer Science classes were difficult, but I found that rush that many come to find when building software. That hit of dopamine when you finally get a code to compile, followed by the immediate brick wall when the output is not what you expected. This constant tennis match of success and failure was something I had not quite experienced before.\nThroughout my time at Augie, I continued forward with programming classes, even though I eventually dropped the computer science major for a computer information systems major. The primary reason being, ashamedly, that I found computer science III’s difficulty greater than the effort I was willing to put into it. At the same time, I found marketing interesting and decided I wanted to go more into that direction. Who knows how this decision would have impacted where I am today, but it is something I think about from time to time. Even the thought of returning to college to finally get the CS degree has not been completely ruled out.\nEarly Career\nUpon graduation from college, I started my career at a local advertising agency called Lawrence and Schiller. I interned as a Digital Strategist, which mostly consisted of project management type work for website design and development. I found myself more interested in the development side of work than the actual marketing side during my 9 months with the agency. I wanted to learn more from the developers I was working with. I would often shadow them in order to see what programming in the “real world” looked like.\nAfter the internship, I moved to a software development organization called Omnitech. I learned a lot during my time in sales at Omnitech. I learned a lot about technology, business, people, and myself. I could write a lot about some of the things I learned at Omnitech, possibly another post coming soon. To keep things focused, I found myself gravitating to the developers of Omnitech and asking them questions about technology and the things they were working on. The tug of programming was still there.\nGaining Steam\nZuercher Technologies was the place to work in Sioux Falls if you wanted to work in tech, at least that is how I saw it. The founder, Michael Zuercher, was someone who had piqued my interest for years. The company that he built was fascinating to me, as a person who loved learning about both technology and entrepreneurship. After applying for several positions with the company, all of which ended in a “no”, I was given a shot by a great data conversion manager, Mike Oppelt. As a data conversion analyst, it was my job to shape the data from a public safety agency’s legacy software system into a format that would work with their new Zuercher software. Instead of making sales calls and working with people, my job was writing SQL and working with databases. This was my real taste of professional technical work. Since I was very much on an island of sorts because of the product I was working on, I was given a lot of flexibility to make the process my own, including working with Python to build tools and scripts to make our conversions faster and better. That programming tug was in full force here as I found that this scripting and tool development was my favorite part of the job.\nOver a year into my time at Zuercher, the company merged with another public safety software provider and we became CentralSquare Technologies (CST). That same manager that brought me on as a data conversion analyst asked me to be manager of a data conversion team. Business and leadership was something I had wanted since college, and my chance had come. Honestly, this was faster than I had originally thought, but I was ready for the challenge. I had a great team of data conversion professionals and we did great work during my time as a manager. I learned even more during this time because of the quality of my team and leaders I worked with every day. However, that programmer tug would not go away so easily.\n2 years of management passed, and I was ready to get into the development space. But, I didn’t exactly take the next step most people would think to take. Instead of transferring into a developer role at CentralSquare, I transferred into a manager of a development team. I learned more during those first few months than I ever had. I needed to write down words and phrases as they were stated during meetings, so I could go back later and find out what was being said. At one point I had over 150 terms and phrases that I had researched. I learned so much during my time managing the team of developers, but there was still something I needed to do. I needed to prove that I could be a competent developer, with my hands actually building the software.\nDuring my time as a manger, I was fortunate enough to be able take a few user stories (work items) from time to time and put my self-taught learning to professional practice. I am convinced that these efforts are what brought me to even have a chance at getting into FTI, where I currently work. Since I had worked in Angular at CST and FTI needed an Angular developer, I got lucky. Luck certainly played a role in a lot of my past experiences, but even more so, it was from the people who took a chance on me. I am very grateful for those who took a chance on someone with little or no experience in the field I was applying for!\nFinal Thoughts\nAs mentioned at the beginning, this career journey hasn’t been the stereotypical linear one. The interesting bit across the entire journey has been that programming has popped up throughout each step along the way. I continued to learn more about programming in my spare time at each and every step. Codecademy, Pluralsight, YouTube, books, and GitHub are all great resources for those who want to get into programming. You do not need a special degree or a bootcamp, as long as you have the discipline to put in the effort. Having said that, you also need the hunger to learn and the willingness to get knocked down. A mentor of mine recently stated that you will certainly be successful if you continue to strive towards topics that interest you, shout out to Jeff Beard! This statement connects with me the longer I think about it. To be good at something, you have to put the work in. In order to put the work in, you have to have some desire to want to learn more about it, otherwise, you will certainly burn out. Pure willpower can only get you so far. That does not mean that things won’t suck sometimes, every job/position/role has some shitty parts... but if you can get through the shitty parts, you know you found something special.\nAs for me, I am not completely sure what the next career step looks like (for the first time in a long time). There is a good chance that I get into management/leadership again, since I enjoy learning more about those topics. On the other hand, I like being in that “flow” state of development. Stay tuned and stay determined!"
    }
]