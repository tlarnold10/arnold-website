[
    {
        "title": "What is AI and how am I using it every day as a software developer?",
        "description": "What is AI and how am I using it every day as a software developer?",
        "headerImage": "./assets/images/AI.png",
        "publishDate": "August 29, 2023",
        "content": 
        "<p>Note: Throughout this article, I will refer to ChatGPT, Bing, Bard, or Phind. When using a specific tool, I will reference it by name. I will also refer to any of these AI tools as “AI tool” throughout the article when making references to general use of any of these tools (likely more than one).</p><p>You might have heard of a little thing called ChatGPT by now. The AI web app has taken the world by storm, amassing a user base of 1 million faster than any other application before it. It also kicked off the AI arms race resulting in the fact that we cannot go a single day without hearing about the latest in AI! According to statista, <a target=\"_blank\" href=\"https://www.statista.com/chart/29174/time-to-one-million-users\">https://www.statista.com/chart/29174/time-to-one-million-users</a>, ChatGPT reached the one million mark in only 5 days, destroying Instagram’s record of 2.5 months!!</p><p>Funny story, Meta’s Threads actually leaped over ChatGPT by reaching the million users mark within hours of launching.</p><h2>What is AI?</h2><p>So what is AI?</p><p>AI (Artificial Intelligence) at the end of the day uses data (an ass load of data) to determine how to answer a question for you or predict what your next steps are going to be. For example, if you ask any of the AI tools a question, it takes your question and compares it to similar questions that have been asked throughout the history of the Internet (data depending on the company collecting that data) and provides an answer based on a set of answers to those similar questions, likely looks at ratings to those answers if they are available as well as the frequency of those answers to those questions. This is 100% a simplification of what is going on behind the scenes (so much so that I don’t think I could fully understand everything behind the scenes), but this is how I have come to understand it based on my knowledge of machine learning and its connection to artificial intelligence. If you truly understand this well, I would love to hear from you! Companies like Microsoft and Google have so much data on people that it makes creating these AI models feasible. Over the past several decades, these organizations have collected data and have trained these AI tools from all the data they have collected. So all your Google searches have likely contributed in some extremely small way to the AI revolution.</p><h2>How I Use AI</h2><p>There are many different AI tools being created recently for use by anyone, ChatGPT, Google Bard, Microsoft Bing, GitHub Copilot, etc. Throughout the past couple of months I have played around with many of them in order to better understand what they could be used for in certain situations and use cases. I am certainly no expert on AI, nor am I the biggest user of AI tools. Having said that, I want to tell you how I am using AI as a software developer. While I am approaching this topic from the perspective of someone developing software every day, there are many other use cases in which AI could be helpful. For example, a friend of mine is using ChatGPT to build macros for excel. He is an accountant, not a software developer, but he is still getting value from the use of ChatGPT. I have also not had the pleasure of using GitHub Copilot as of this writing, but I have heard great things about it.</p><p>Thus far, my primary use case for AI tools has been learning. A couple of recent examples:</p><ul><li>Starting a new java project and needing to quickly learn how to build an http server in Java. ChatGPT was very quick to build me some code and then explain what was happening line by line.</li><li>I was having a tough time understanding Redux for my react app, but I was able to pick it up after asking ChatGPT to explain it to me. Not only could ChatGPT explain it to me, but I could ask follow up questions, or even ask it to explain it in a different way, “explain the redux store as if I were new to front end software development.”</li><li>Looking to better understand the approaches to state management in Svelte.</li></ul><h2>Suggestions on Using AI</h2><p>Just a couple of thoughts and recommendations for those that are looking to use AI or want to start looking into what it could offer:</p><ol><li>Be very careful on what you share with these AI tools. Many of these AI tools are free, which means the companies behind them are making money somewhere else. Very often, if you are not directly purchasing a product or service, your personal information is the product that companies are selling to other companies for advertising purposes. It is very easy for these companies to mine the data you are feeding their tools and use that data to create a special profile just for you. The AI tools are also using this data to continually update their AI models so that they continue to evolve. This is nothing new, Google and Facebook have been doing this for years, but just something to be aware of when working with these AI tools. Do not share any confidential information and use your best judgement on what you want these companies to know about you.</li><li>Make sure you are very clear and direct about what you want the AI tool to do for you. These tools are very literal and need clear instructions when being asked questions. This is a skill all in it of itself, because you can learn the best way to ask questions to get the insights you are looking for.</li><li>Just try it. I know it can seem strange and difficult to some people, but these AI tools are not going anywhere and the earlier you can learn to utilize them, the better off you will be.</li><li>Think of AI as a possible aggregator and consolidation of information. You can use an AI tool to help do research for a possible trip or what are some pros and cons of a specific programming language.</li><li>Always double check the work of AI! It is not perfect, so take a look at some other resources along the way. Sometimes, the AI tool will provide website references to an answer, use them. Just like you shouldn’t believe everything you read on the internet, you should also not believe everything you hear from an AI.</li></ol><h2>Conclusion</h2><p>At the end of the day, AI is not going to be going away any time soon and it is just going to keep getting better. It likely is not coming for our jobs yet, but I think everyone should be learning how to use it in their space because it is going to be integrated into our lives more and more moving forward.</p>"
    },
    {
        "title": "Developing and Publishing My Svelte App",
        "description": "Developing and Publishing My Svelte App",
        "headerImage": "./assets/images/svelte3.png",
        "publishDate": "July 6, 2023",
        "content": 
        "<h2>TL;DR;</h2><br>As you have probably inferred from the title of this post, the following is a technical writeup of my experience developing and deploying a web application. Non-technical people may not find this super interesting, but my hope is that others looking to build their own application and get it out into the world can learn from this.<ul><li>GitHub Repo: <a target=\"_blank\" href=\"https://github.com/tlarnold10/managementTool\">https://github.com/tlarnold10/managementTool</a></li><li>Management Tool: <a target=\"_blank\" href=\"https://merry-axolotl-b825f0.netlify.app/employee\">https://merry-axolotl-b825f0.netlify.app/employee</a></li></ul><h2>Idea / Problem</h2><br>To start out, my objective of this project was to learn a new frontend framework, Svelte, and build something that could actually provide value to other people. So with that in mind, I combed through my previous experiences and thought about tools that could have been helpful to me. I put together a starting list of prospective ideas (list can be found here: <a target=\"_blank\"href=\"https://arnoldtec.carrd.co\">https://arnoldtec.carrd.co</a>), but the one that caught my attention utilized a concept I find extremely interesting, leadership. During my time in management, I frequently struggled to remember everything my direct report and I would discuss… This was something that really frustrated me because I cared about them and wanted to build a strong relationship with these team members. I tried to keep track of personal insights, feedback, or conversations using Microsoft’s OneNote, but I constantly found myself losing track of time and never actually getting around to writing down my thoughts and observations. The relationships I built were good throughout my teams, but I can’t help but thing that they could have been better if I was more effective at . Not only was this a constant struggle, but I found out that I really did not enjoy end of year reviews. Based on conversations with other leaders, I am not alone in the dislike for annual reviews. I wished there was an easier way to track direct report goals and progress throughout the entire year. Before I move onto the solution, I want to mention that I wanted all end of year reviews to be a boring event for both myself and the direct reports. End of year reviews should not be the first time an employee is receiving feedback or constructive criticism. If they are surprised by anything in the end of year review, then the manager is the one doing something wrong. But, end of year reviews still need to be completed, so I still needed a solution that used a collection of feedback and progress for each employee throughout the entire year. Another problem that I read online is that many managers struggle to create end of year reviews that incorporate feedback/progress from the entire year, often only looking at the last couple months. This often makes sense because the latest feedback/progress is often what is still in the manager’s mind. It is hard to think back 10+ months of performance.<br>Thus, the adventure to build my management tool began. The thought being that I could enter feedback and 1:1 notes throughout the year and then be able to review those notes when the end of the year review came along. I will talk about this more later, but I would also incorporate some feedback from others, a sort of 360 review, as well as any personal or professional goals that the direct report wanted to work towards. Now that we have a problem and possible solution, let’s start building!<br><h2>Development</h2><br>Whenever building out something new, I like to draw out any UI screens, user workflows, or entity relationships on my iPad. This initial step is for me to work through ideas and relationships on “paper” and give me an architecture overview to start coding from. Obviously, these initial concepts are never perfect, but act as a north start to work towards.<br>This project was going to be more difficult than a normal web app would be because I wanted to try out a new frontend web framework, Svelte. So not only did I need to build everything out, but I also needed to learn Svelte in the process… Now this was not super difficult because I have a decent amount of experience with Angular and I recently learned React and Vue for a frontend framework presentation. While learning a new framework can be difficult, each new one learned is easier than the last because a lot of the core concepts are very similar between them all. For example, in Svelte, you can use the ‘$’ character for sharing state between components, while Angular usually relies on creating Observables and subscribing to those Observables using the RxJS library. I chose Svelte because it is a very popular up and coming framework and many frontend developers like it for its simplicity and the fact that it compiles your Svelte code into native JavaScript, so technically Svelte is a compiler more than an actual framework.<br>A couple of technical gotchas I came across during my development that are specific to Svelte development:<ol><li>The filesystem-based router, which is managed by SvelteKit, took some time to get used to. Each URL route is defined in the routes directory with a +page.svelte file for client side rendering. Then any server side logic is defined with a +page.server.ts, which utilizes SvelteKit mostly for loading data from the database or any other server side functionality. This can really get confusing as you have multiple +page.svelte and +page.server.ts files open at the same time and you need to remember which directory you are working in at any point (see folder structure below).</li><li>I was never able to find a standard folder structure for a Svelte application. I used my previous Angular experience and what made sense to create the following folder structure.</li><li>The `$` symbol is extremely powerful in Svelte as it allows you to bind the state of a variable across components and even trigger code when the state of the variable changes. I used this on the employee page so that the UI would be updated after a new goal, 1:1 note, or feedback was added from their respective modal windows.</li></ol><br>Throughout development, I used some local json files for building out the local version to just be able to see data. Honestly, getting local json to work for deployment took a serious amount of time, so it probably would have just been easier to utilize my backend as a service solution, Supabase, from the start. Supabase is a solution that removed the need for me to deploy an actual backend API and Postgres database! Supabase handles all the backend work, so I just need to use their APIs and JavaScript packages in order to read from my database hosted in Supabase. This was super helpful for development as I was able to get my backend up and running within an hour. Building out all of this backend code in Go or Python would have taken 5-10x times longer, not even considering the time it would have taken for deployment. I am still using the free version of Supabase but might need to bump it up to a paid version if the traffic of the app is large enough. Something that I did appreciate when moving from local json to Supabase was the importance of having a data access layer in my application. Because I didn’t originally have this layer, there was a lot of extra clean up I had to do because the UI was tightly coupled with the local json. This involved a lot of code rewriting, but ultimately made it much cleaner moving forward. Ultimately, I broke out the fetching of the mock data and Supabase data into two separate services that could be called as needed. I also made sure to implement a mapping service to map the objects from Supabase database to frontend models.<br>Source code can be found here: <a target=\"_blank\" href=\"https://github.com/tlarnold10/managementTool\">https://github.com/tlarnold10/managementTool</a><br><h2>Deployment</h2><br>The actual deployment of my app was both difficult and easy. Deploying 99% of the application was easy to do, there are many different solutions for this. The biggest problem was getting the local json to work in the “production” system. When building the application locally and then deploying the built application, the json data never appeared. I tried AWS Amplify, Vercel, and Netlify. I eventually was able to get the application deployed via Netlify by connecting my GitHub repo to Netlify. Netlify, and Vercel actually, have an API that can be used for Svelte applications deployed to their platforms. This made the actual deployment really easy. All three options were easy to use, but I have to give the ‘W’ to Netlify for having the Svelte API, GitHub integration, and ability to utilize my local json files.<br>Lessons Learned<ol><li>Svelte is awesome and I would love to continue to build web apps with it.</li><li>Frontend technology is much more difficult than just creating a pretty web site. Throughout this processes, I had to learn a lot about state management, hydration, server side rending (SSR), and deployments.</li><li>Make sure you plan out the application layers and build in the necessary abstractions from the start. As I mentioned above, I had to rebuild a chunk of the UI because I had built it using the local json files. I just finished the book Clean Architecture by Robert Martin, and would have done things differently from the start if I had read the book before starting this project.</li><li>Deploying web apps has gotten much easier with tools like Netlify and Vercel.</li></ol><h2>What’s Next?</h2><br>Writing this post has not only helped me realize how far I made it with this application but also how much further I want to take it. It can be very easy to build something and leave it half done in the bin of ‘in progress’ work. Even now I am excited to start something new (*cough* rust *cough*), but I try to resist the urge and continue building out my management tool (unless there is some serious interest in another of my ideas). I really want to clean up the UI, implement additional configuration, and add in some automation. Supabase also has authentication built into it, so I really need to create user authentication in the application next if I want other people to be able to use the app in any meaningful way. But instead of stressing out about it, I try to look at it as a learning experience that I build on for fun. I try not to set deadlines and get discouraged when I am not able to touch it for some time.  Otherwise it becomes something that weighs on me a lot. I hope you learned something, let me know what you think, and follow along as I continue to build a tool that helps turn managers into leaders!<br>Management tool: <a target=\"_blank\" href=\"https://merry-axolotl-b825f0.netlify.app/employee\">https://merry-axolotl-b825f0.netlify.app/employee</a>"
    },
    {
        "title": "Management Time",
        "description": "What I learned going from individual contributor to manager, and back again.",
        "headerImage": "./assets/images/management1.png",
        "publishDate": "June 2, 2023",
        "content": 
        "<h2>TL;DR;</h2><br>I always wanted to be a manager, before I even understood what management was. It is not easy, nor is it for everyone. I went from being an individual contributor, to manager, and then back to individual contributor. I learned a ton throughout this process and wanted to share my experience to those that want to be managers or who are managers. Long story short, focus your efforts on understanding what you do and do not like in every role that you have. You do not have to grow in a straight line from individual contributor, manager, director, VP, etc. Follow what you are curious about and focus in on the topics you actually want to invest in and learn more about.<br><h2>Pre Management</h2><br>Throughout my time at Augustana University and early in my career, I was hell bent on getting into management and climbing my way up the corporate ladder. When I left my first job out of college in sales it was because I wanted to get into a technical role and then progress to manager, director, and eventually VP. That was my game plan. I enjoyed, and still do enjoy, strategic thinking and breaking down goals. The actual act of looking at what we want to accomplish and what actions we need to take to get there is something that I have been excited about for a long time. On a more naïve level, I also wanted to be the boss because I thought that was what the cool thing to do would be. I wanted to wear the suit and I wanted people to know that I was an important person. During this time, I did not fully understand what being a manager would look like in the real world. While I was starting to see that there was a difference between management and leadership, I had yet to step into one of those roles myself. I still remember during my interview for a data conversion analyst at Zuercher Technologies, now CentralSquare Technologies, I told the all the interviewers that I wanted to go from technical individual contributor to manager as part of my career progression. Management and climbing the ladder was all part of the plan. For 1.5 years I worked on data conversion for one of the smaller products at Zuercher Technologies. It was just a project manager and me, so it was all on the two of us to make these conversions work effectively. Because I was able to own this program and make significant efforts in streamlining the process, my manager promoted me the role of managing of our Sioux Falls data conversion team. After I was promoted, I asked him why he chose me from the lengthy list of applicants. One of the reasons has always stuck with me, which was because of the ownership I took on the data conversion program I was working on. Not only was I writing the SQL to transform the data, but I was writing custom python code to make some of the data to appear in the application as expected, I was building a framework for all data consolidations for the program moving forward, and I was performing several project management functions (ticket management, documentation, and timeline definition). While I was also in an online MBA program at the time, I can say with a high degree of confidence that my MBA was not the thing that propelled me into management.<br><h2>Lessons From Management</h2><br>The transition from analyst/engineer to manager was not an easy one for me. Not only did I need to figure out what kind of manager I wanted to be, but I also had to continue to support my data conversion projects that still had deadlines coming up. I learned a lot during this time, but it was not a gradual process. I now had 5 direct reports and planning to double the team size over the next couple of months! The people that were my peers were now reporting to me… there were some awkward conversations, but ones that needed to be had. These were the people that knew the data conversions we were doing better than anyone. In order for the team to continue to be successful, I needed them to understand that my goal was not to come in and make a bunch of changes, but I wanted to support them and continue to make small improvements to how we completed our projects. Not only did I have to learn what it was like as a manger during 1:1s (which is something that has been difficult for years), but I had to make sure we were able to onboard 5-7 new data conversion analysts extremely quickly. I have been through many interviews throughout my career, but being the person on the other side of the table doing the interviewing was a very different ball game. Fortunately for me, I had a great team and manager to help me along the way. The team was extremely self-sufficient and were able to excel in their work without my intervention. All the new things that came with management I knew I could ask for help from my manager.<br>It took a lot of time, a few screw ups, and a worldwide pandemic, but after 2 years of managing the data conversion team, I felt like I had a solid grasp on managing the data conversion team. Then, I decided to manage a completely different team, a team of software engineers on another product line. Thanks to the relationships I had built within CentralSquare Technologies (formerly Zuercher) I was able to transition into managing another team. While I had become fairly competent as a manager of data conversion analysts, this was something else completely new: managing people who were doing work that I had never done. I knew a few development concepts, but I still had a lot to learn in order to effectively lead the team. I would sit in meetings trying to absorb as much as I possible could, frantically writing down every word I did not recognize to make sure that I came back to research it after the meeting. At one point, I think I was up to 200 terms that I needed to learn about! While my previous management experience had required me to “keep the ship moving in the right direction” and only required a couple minor improvement, this new endeavor was in need of some significant enhancements. The team hadn’t had a major release in 1.5 years and the dev team was constantly being interrupted for customer support. There had been a significant amount of time put into a database migration from MongoDB to Postgres, which still had a lot to go… Looking back, I am extremely grateful for this opportunity. I learned so much and built a lot of solid relationships. I learned what TDD looked like, why unit testing was important, CI/CD pipelines, microservice architecture, containerization, Kubernetes, message brokers, the list goes on and on. Because I was new to development and managing people who had spent years building software, I wanted to get a better understanding of what they did every single day. So, I did my best to pick up at least 1 ticket per 2-week sprint. This was a very eye-opening experience because I quickly realized that my favorite part of my weeks were the times I could put on my noise cancelling headphones and crank out some code for a couple of hours, uninterrupted! This was kind of where I started to question my career path up to this point and thinking about where I should go from here… After a lot of thought and prayer (along with some feedback from a couple mentors), I decided to take a step back and learn more of the technical side of software development. So, after only 13 months of managing a team of software developers, I moved to a new company doing software development.<br><h2>Post Management</h2><br>Thus far, I am happy with my transition out of management and into development. There are days that I miss the strategy sessions and spending more time talking through processes with others as my primary role. There are also days where I need to get outside for a walk just get away from my computer monitor for a bit. Will I ever get back into management? Maybe! But something I learned from going to management and back again was that you don’t need the title of manager to lead people. You don’t need to be a manager to impact how works get done or to drive a team / product in the right direction. You don’t even need to be a manager to impact the other members of your team (both current team members and future ones). From my days in management, I can be a better developer by understanding how to communicate with other developers. I can also understand the project management philosophies in a more holistic way because I put some into place and altered them many times during my time in management. Perhaps the most important part of my journey to and from management has been a better understanding of what I want and do not want, and how I then can communicate that back to my leader. At the end of the day, managers should be there to support their employees and I realized that in order for my manager to help me, I need to be able to communicate with them effectively.<br>So, if you want to work your way up the chain of command, go for it! Make your boss know what you want and ask them where you need to grow to get there. Having said that, do not be afraid to “take a step back” from management. It is okay to admit it is not for you. Management is hard and not for everyone as it takes a very special set of skills to do it well! One of my favorite concepts is that your career does not have to be a straight line and completely planned out from the beginning (like a linear path), it is very often an open field that you can explore as you gain knowledge and better understand the world and yourself."
    },
    {
        "title": "Frontend Framework Faceoff",
        "description": "Angular vs. React vs. Vue.js",
        "headerImage": "./assets/images/frameworkFaceoff.png",
        "publishDate": "April 9, 2023",
        "content": "<h2>TLDR;</h2><br>All these frameworks are solid and an argument could be made to use any of them. From my experience, I liked using each because of a different reason. Angular has a standard structure so you don’t have to make so many decisions yourself and a cli that generates some code for you.  React has JSX/TSX which is nice to “inject html” into your JavaScript/TypeScript. Vue.js has the different parts of the component (HTML, CSS, and JavaScript) in the same file, neatly organized. Plus, Vue.js was not created by a major tech company, for those wary of the major tech companies. However, all are now open source.<br>This article was based on a presentation I gave on the framework faceoff for the Sioux Falls Developers Group. I want to thank <a href=\"https://www.blendinteractive.com/\">Blend Interactive</a> for allowing the group to utilize their office for the presentation and for the food. I also want to thank those that attended for taking the time to get together and talk tech for a few hours. For anyone interested in the Sioux Falls Devs group, check out our website: <a href=\"https://www.sfdevs.com\">https://www.sfdevs.com</a>.<br><h2>Faceoff </h2><br>There have been countless debates and articles written about the “best” frontend framework (I know that react is technically a library and not a framework, but for ease of reading and writing, I will be referring to it as a framework in this article). The Internet does not need another one. Having said that, I would like to present some of my thoughts on the subject as someone new (at least professionally) to the conversation. Instead of just doing some research on the frameworks, and based on a recommendation of a mentor of mine to try out different frontend frameworks, I decided to build the same application in each framework. Plus, if you are a user of ChatGPT, it will give you a great explanation if you just ask it what the difference between the three frameworks are. Before we delve into my experience, a bit of a disclaimer: I spend most of my working days in Angular, so that is the framework I am most familiar with. Much of my development experience is self-taught (feel free to check out my previous articles on that subject).<br><h2>Project Overview </h2><br>When thinking through what I wanted to build 3 times in a row, there were a couple of items I wanted to make sure were included: HTTP Request, UI styling, state management, and lifecycle hooks. I wanted to build something complex enough that the example applications would have enough meat on them for a demo, but not so complex that it would take months to build with 3 different frameworks. I ended up doing some research on public APIs that I could pull some data from and came across Spoonacular (<a href=\"https://spoonacular.com/food-api\">https://spoonacular.com/food-api</a>), which provided an endpoint that provided food recipes based on many different queries. The data that I cared about for this app was the number of calories, protein, fat, and carbs per recipe. This was a great API to use! It provides a lot of information and larger applications could easily be built using the API, however, you do need to create an account and the free access does cap the number of requests you can make each day. With my API in place, I wanted to build out 2 major features for my app.<br>The ability to generate a number of dishes based on the following criteria:<ul><li>Max calories</li><li>Min calories</li><li>Max protein</li><li>Min protein</li><li>Max fat</li><li>Min fat</li><li>Max carbs</li><li>Min carbs</li><li>Number of records to return</li></ul>Be able to add a dish to my day and then total the number of calories, protein, carbs, and fat for the day.<br>With these two features in mind, I got started coding up some applications.<br><h2>Development</h2><br>For the actual development of the applications my approach was fairly strait forward. I would start with Angular, then React, then Vue.js, the reason being that I had the most experience with Angular, absolutely no experience with Vue.js, and a little React. I did not want to build the entire thing with each framework, instead opting to build a little bit with Angular, then move to React and build that same little bit with React, then finally with Vue.js. The thought process was that I would retain that work fresh in my mind and taking smaller pieces and iterating over each framework. This ended up working out really well and I would suggest the same if you ever want to take on a similar project. The development cycle was: macros form -> form results into a table -> daily summary table -> add dish to summary -> summary totals -> design cleanup.<br><h2>Lessons Learned</h2><br>So, what did I learn from this experience?<ol><li>Building out each app using Angular, React, or Vue.js was fairly simple the first app was built. Once you have a general knowledge of how each work, which you can get from any starting tutorial on their respective web sites, the building of the web app is not difficult. Each framework takes a different approach to this. I heard a phrase that perfectly sums up Angular and React at one point: Angular injects JavaScript/TypeScript into your HTML, while React injects HTML, via JSX/TSX, into your JavaScript/TypeScript. Meanwhile, Vue.js has everything in their own .vue file that breaks HTML, JavaScript/TypeScript, and style into their own section.</li><li>State management was easily the most difficult aspect of development for each of these. This was partially intentional because I wanted to experience some different ways of working with state in each framework. Angular, I used what I was familiar with which was RxJS. React, Redux is extremely popular. Vue.js, XState because it is used by a local software company and I wanted to learn what they learned. State management using Redux and XState took some time to fully understand, as there is a lot of very specific parts to each of these. For the apps I built, a full blown state management tool was not necessary, I could have easily passed data up and down the component tree as needed. However, as I mentioned before, I wanted to get a feel for state management in each framework. For the most part this is not something that that was difficult because of the frameworks, but rather the challenges associated with each library. You can usually find the same state library you are accustom to, or something very similar, for state management in each framework.</li><li>Something that took just as long as state management, but really should not have, was getting a UI library to work with Vue.js... Angular and React were very simple to import and use prebuilt UI components, but I continued to run into problems with Vue.js... This issue with Vue.js stemmed largely from the recent release of Vue.js. I ultimately was able to make something that looked halfway decent using the Quasar framework (<a href=\"https://quasar.dev\">https://quasar.dev/</a>). I would highly recommend Quasar because it has a lot of powerful tools that many other UI libraries do not and allowed me to build something relatively easily after I found it.</li></ol><h2>Who Wins?</h2><br>So, the real question, who wins this faceoff? If you have spent any time in the professional world, you know that the answer is: “It depends.” I know that is not the answer most people want to hear, but given the difficulties that come with development, personal preferences, and the limited amount of time I spent with each framework, that is the best I can come up with. There were things I liked and disliked for each framework and situations where each would work better than another.<br>A lot of articles I read stated that you should not start with Angular because of the amount of 'stuff' that comes with it and the fact that you have to build the 'Angular way'. I disagree with this assessment. Angular is more restrictive than the other frameworks, which could be helpful for newer developers to frontend development. The resources online are also much more likely to work as in your own code because most Angular apps are built in a similar way. While the buzz around Angular is not increasing like the others, even decreasing according to some resources, it is still widely used and a great option for those in a community with a lot of need for Angular development.<br>There is a lot of resources online for React, because it is the most popular framework for frontend development. It was great to be able to use TSX, it made some things a lot easier from what I was use to in Angular. Having said that, the fact that you could either use functional or class components got a little annoying from time to time. There were several situations in which I would be doing research on something, only to realize they used a class component, while I was using a functional component. React is probably the safe choice because of its popularity and available resources.<br>Vue.js was the tool I had the least amount of knowledge about, but having used it, I liked it. While the number of resources where far less than Angular or React, it was something new to figure out for myself. The fact that it is not started by one of the large tech companies and the “icky” feeling of working with technology that was developed by organizations that collect personal data, is just a plus for Vue.js.  Vue.js is a cool option and a little bit of a maverick compared to the other two major players.<br><h2>Overtime Bonus</h2><br>Since I had some between finishing up the three major frameworks and when I was presenting to the SF Devs group, I decided to play around with two more frameworks, Next.js and Svelte. As before, I am not going to go into depth about what these frameworks are and what makes them special, you can Google that or ask ChatGPT. From my experience, since Next.js is built on of React, if you know React, you know Next.js. However, Next.js has a lot of additional features when looking at how it actually renders pages for the user. For my project, it did not really matter though. I then built another app in Svelte and I was very impressed. From my experience, Svelte is my favorite of the frameworks. It is newer than the others so the creators of Svelte were able to build it from the ground up with all the lessons from the other frameworks. The community for Svelte is still very small and the tools are young, but I think it is very promising. I am glad I picked up Svelte because it might be something I will be using more of going forward.<br><h2>Conclusion</h2><br>My suggestion to anyone trying to learn a frontend framework would be to play around with a couple of them to see what you like. Me personally, I am going to continue working with Angular for my job, know a little of React because of its massive market share it has in the space, and build some side projects with Svelte because I like the framework so much. I would suggest every front-end dev knows the basics of React because that is where 80% (complete made-up statistic) of the jobs are. Having said that, spend some time learning something else that piques your interest because the field is rapidly changing and the knowledge might open new doors for you. Learn a new up and coming framework for fun but balance that skill out with an established skill like React or Angular.<br>All my code for this project can be found on my GitHub page <a href=\"https://github.com/tlarnold10/frameworkPresentation\">https://github.com/tlarnold10/frameworkPresentation.</a>"
    },
    {
        "title": "My Time in Sales",
        "description": "While not part of the original plan, my time in sales taught me a lot.",
        "headerImage": "./assets/images/aIMG_2302.jpg",
        "publishDate": "February 15, 2023",
        "content": "For as long as I can remember, my mother was in sales. I never found any interest in the topic and had a general aversion to “salespeople”. Never would have considered it something I would have done professionally. Then how did I end up as an outside sales rep at a software development company shortly after college? I would be lying if I said that at that time it was a strategic decision in order to set myself up for success in my career. Even though the experience was more of a leap of faith than a meticulously planned chess move in my career, I learned a lot during my time in sales at Omnitech. I am positive I would not be where I am now if it wasn’t for the experience. I know sales is not something many people want to read about, but to those people I say: “just give this post a quick read, you might find some little nuggets of info”. Here are some of the most valuable lessons I learned during my time in sales at Omnitech.<ol><li>Relationships are important. This goes for sales, management, family, community, and life in general. You want to surround yourself with people you like to be around. You can take this a step further by saying that you want to buy from people you like. Building relationships is how you lead a successful team, and trust is built through those relationships. I am not going to buy something from someone unless I can trust the person selling it. In my opinion, this is the golden rule for salespeople. Building a relationship takes time and when things go bad (which eventually something will go bad), the solid relationships are the ones that last. A solid relationship doesn’t happen overnight, you have to invest time and energy into it. I strongly recommend everyone read the incredibly popular book “How to Win Friends and Influence People” by Dale Carnegie to improve your relationship building prowess. This lesson helped me so much in my career, because I knew I had to build relationships with my boss, my team members, and coworkers. That’s when you can really get shit done, when you have a solid team in which the team members have relationships built on trust amongst each other.<br>Going to add a sub item here to mention that having a solid relationship with your coworkers can greatly improve your work experience as well, so be sure to invest some time into them!</li><li>Sales (revenue) is what drives business. This may seem a bit obvious, but unless you have money coming in the door, you don’t have a successful business. Someone will argue that you can have a successful business that makes no money, many tech startups operate this way by taking outside investments or going public. However, I would not take this approach because if you do not have sales, you don’t know if anyone actually values what you are providing. If you think you have the best product in the world, but no one is going to spend their money on it, then your product might not be such hot shit... </li><li>No matter what a person’s title or what company they work for, at the end of the day, they are still just a person. This is not meant to devalue anyone, but rather help people understand that even the CEO of a massive corporation is still just a human. They have personal issues they are working through just like everyone else. As my sales manager at Omnitech use to tell me, “Everyone puts their pants on the same way: one leg at a time.” This idea gave me the confidence to cold call people and want to provide value to them. With this concept in mind, many of the most successful people are a lot less intimidating. So, invite that person you look up to out for coffee or lunch. The worst thing they can say is “no”, but I have often found that people are more willing to mentor others than we think. You could have a life changing experience because you took a chance to talk with an influential person. Even if they do say “no”, you can ask someone else, which brings us to the next point... </li><li>You are going to hear “no” a lot in life, and that is okay. I really struggled with this when I started in sales. Not only was I a more introverted person that didn’t always want to talk with others, but after the 100th time someone tells you they don’t want to talk to you, there were times I did not want to do it anymore. I believe it is the person that can hear the word “no” the most in life and keep moving forward that will be the most successful. You didn’t get a job offer at that company you wanted to work for? That’s okay. Learn something from it, implement some changes for next time, and apply for another job!</li></ol>At the end of the day, sales is not for everyone. I am not suggesting that everyone go out and get a sales job ASAP. But the experience certainly opened my eyes to the way professional and business life operates. So go ahead and take chances by meeting with a mentor of yours, learn how your business actually sells and makes money, build a stronger relationship with your boss, and if you are looking to start your own business, make sure you are building something that people will actually buy! <br>I want to close with a special shout out to the leaders at Omnitech for taking a chance on me. They took in a fresh graduate with no experience on a whim that he might be able to provide value to the company. I learned a lot from them and I thank them for the opportunity!"
    },
    {
        "title": "My Journey to Software Developer",
        "description": "While not part of the original plan, my time in sales taught me a lot.",
        "headerImage": "./assets/images/Picture6.jpg",
        "publishDate": "December 28, 2022",
        "content": "My path to software development has not necessarily been the most strait of lines. It has been a ride, one which I pray marches forward as well as it has. I wanted to share my career journey to this point and some lessons along the way. Not only is this a narrative for self-reflection, but I hope a lesson that can inspire others in their journeys.<br>To keep this post from turning into a novel, I would like to look at my career thus far on how programming has left a consistent impact on my career progression.<br><h2>College</h2><br>College was certainly a time period of significant change. Beyond the obvious changes that come with moving away from parents for the first time, there is a major life decision that needs to be made: “what do I want to do for the rest of my life?” This was a difficult one for me... I knew a little about computers, but nothing beyond a high school class on Excel and Photoshop. But what I did know, I found interesting enough to declare a computer science and business major at Augustana University, Augustana College back in my day! Computer Science classes were difficult, but I found that rush that many come to find when building software. That hit of dopamine when you finally get a code to compile, followed by the immediate brick wall when the output is not what you expected. This constant tennis match of success and failure was something I had not quite experienced before.<br>Throughout my time at Augie, I continued forward with programming classes, even though I eventually dropped the computer science major for a computer information systems major. The primary reason being, ashamedly, that I found computer science III’s difficulty greater than the effort I was willing to put into it. At the same time, I found marketing interesting and decided I wanted to go more into that direction. Who knows how this decision would have impacted where I am today, but it is something I think about from time to time. Even the thought of returning to college to finally get the CS degree has not been completely ruled out.<br><h2>Early Career</h2><br>Upon graduation from college, I started my career at a local advertising agency called Lawrence and Schiller. I interned as a Digital Strategist, which mostly consisted of project management type work for website design and development. I found myself more interested in the development side of work than the actual marketing side during my 9 months with the agency. I wanted to learn more from the developers I was working with. I would often shadow them in order to see what programming in the “real world” looked like.<br>After the internship, I moved to a software development organization called Omnitech. I learned a lot during my time in sales at Omnitech. I learned a lot about technology, business, people, and myself. I could write a lot about some of the things I learned at Omnitech, possibly another post coming soon. To keep things focused, I found myself gravitating to the developers of Omnitech and asking them questions about technology and the things they were working on. The tug of programming was still there.<br><h2>Gaining Steam</h2><br>Zuercher Technologies was the place to work in Sioux Falls if you wanted to work in tech, at least that is how I saw it. The founder, Michael Zuercher, was someone who had piqued my interest for years. The company that he built was fascinating to me, as a person who loved learning about both technology and entrepreneurship. After applying for several positions with the company, all of which ended in a “no”, I was given a shot by a great data conversion manager, Mike Oppelt. As a data conversion analyst, it was my job to shape the data from a public safety agency’s legacy software system into a format that would work with their new Zuercher software. Instead of making sales calls and working with people, my job was writing SQL and working with databases. This was my real taste of professional technical work. Since I was very much on an island of sorts because of the product I was working on, I was given a lot of flexibility to make the process my own, including working with Python to build tools and scripts to make our conversions faster and better. That programming tug was in full force here as I found that this scripting and tool development was my favorite part of the job.<br>Over a year into my time at Zuercher, the company merged with another public safety software provider and we became CentralSquare Technologies (CST). That same manager that brought me on as a data conversion analyst asked me to be manager of a data conversion team. Business and leadership was something I had wanted since college, and my chance had come. Honestly, this was faster than I had originally thought, but I was ready for the challenge. I had a great team of data conversion professionals and we did great work during my time as a manager. I learned even more during this time because of the quality of my team and leaders I worked with every day. However, that programmer tug would not go away so easily.<br>2 years of management passed, and I was ready to get into the development space. But, I didn’t exactly take the next step most people would think to take. Instead of transferring into a developer role at CentralSquare, I transferred into a manager of a development team. I learned more during those first few months than I ever had. I needed to write down words and phrases as they were stated during meetings, so I could go back later and find out what was being said. At one point I had over 150 terms and phrases that I had researched. I learned so much during my time managing the team of developers, but there was still something I needed to do. I needed to prove that I could be a competent developer, with my hands actually building the software.<br>During my time as a manger, I was fortunate enough to be able take a few user stories (work items) from time to time and put my self-taught learning to professional practice. I am convinced that these efforts are what brought me to even have a chance at getting into FTI, where I currently work. Since I had worked in Angular at CST and FTI needed an Angular developer, I got lucky. Luck certainly played a role in a lot of my past experiences, but even more so, it was from the people who took a chance on me. I am very grateful for those who took a chance on someone with little or no experience in the field I was applying for!<br><h2>Final Thoughts</h2><br>As mentioned at the beginning, this career journey hasn’t been the stereotypical linear one. The interesting bit across the entire journey has been that programming has popped up throughout each step along the way. I continued to learn more about programming in my spare time at each and every step. Codecademy, Pluralsight, YouTube, books, and GitHub are all great resources for those who want to get into programming. You do not need a special degree or a bootcamp, as long as you have the discipline to put in the effort. Having said that, you also need the hunger to learn and the willingness to get knocked down. A mentor of mine recently stated that you will certainly be successful if you continue to strive towards topics that interest you, shout out to Jeff Beard! This statement connects with me the longer I think about it. To be good at something, you have to put the work in. In order to put the work in, you have to have some desire to want to learn more about it, otherwise, you will certainly burn out. Pure willpower can only get you so far. That does not mean that things won’t suck sometimes, every job/position/role has some shitty parts... but if you can get through the shitty parts, you know you found something special.<br>As for me, I am not completely sure what the next career step looks like (for the first time in a long time). There is a good chance that I get into management/leadership again, since I enjoy learning more about those topics. On the other hand, I like being in that “flow” state of development. Stay tuned and stay determined!"
    }
]